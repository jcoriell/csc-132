{"title":"01 More On Data Structures","markdown":{"yaml":{"title":"01 More On Data Structures","date":"August 24, 2023","toc":true,"number-sections":true,"format":{"html":{"code-fold":true}},"jupyter":"python3"},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n\nSo far, you have been introduced to various elementary and high level data structures: arrays, linked\nlists, stacks, queues, and binary trees. Specific to Python, you have used lists (similar to arrays) in your\nprograms. In this lesson, we will discuss some powerful functions that work with lists and introduce\nseveral new data structures.\n\n## Useful List Functions\n\nAs you have seen, Python lists are extremely useful data structures. In the first Python lesson, you were\nintroduced to several list functions that, for example, reverse a list, sort a list, etc. In this lesson, we will\ncover several more powerful built-in functions that are quite useful when used with lists.\n\nThe `filter` function returns an iterator that contains a new list consisting of only the items within an\nexisting list for which some user-defined function is true. The user-defined function can be anything\nthat evaluates an input in the existing list and returns true or false. The format for the `filter` function\nis as follows:\n\n```python\nfilter(function, mylist)\n```\n\nThe parameter `function` represents the name of the function that will evaluate each item in the\nexisting list. The parameter `mylist` is, of course, the existing list of items to evaluate.\n\nAn “iterator” is an object that contains a list. We can use iterators to operate on a list of values. To convert this iterator into a list object, that would expose the list it contains, we should wrap the call to filter with a list constructor:\n\n```python\nlist(filter(function, mylist))\n```\n\nThis converts the returned iterator into a list that we can print directly.\n\nSuppose, for example, that you want to find all of the multiples of three or five that are less than or equal to 30 and make a list of them. Here's one way to do this:\n\n```python\nmultiples = []\n\nfor i in range(3, 31):\n    if (i % 3 == 0 or i % 5 == 0):\n        multiples.append(i)\n```\n\nHowever, here's how it could be done with the `filter` function:\n\n\n```python\ndef f(x):\n    return (x % 3 == 0 or x % 5 == 0)\n\nmultiples = list(filter(f, range(3, 31)))\n```\n\nBoth of these methods generate the following list:\n\n```python\n[3, 5, 6, 9, 10, 12, 15, 18, 20, 21, 24, 25, 27, 30]\n```\n\nThe `map` function returns an iterator that contains a new list consisting of the return values generated by a user-defined function on each item in an existing list. The user-defined function is called for each item in the existing list; the return values form the new list. The format for the `map` function is as follows:\n\n```python\nmap(function, mylist)\n```\n\nLike the `filter` function, we need to wrap the call to `map` inside of a list constructor call:\n\n```python\nlist(map(function, mylist))\n```\n\nThe parameters are the same as specified for the `filter` function. Suppose, for example, that you want to square each item in a list. Here's one way to do this:\n\n```python\nsquares = list(range(1, 10))\n\nfor i in range(len(squares)):\n    squares[i] *= squares[i]\n```\n\nAlthough the snippet of code above does modify the existing list, it could be easily changed if needed.\nHere's how it could be done with the `map` function:\n\n```python\ndef f(x):\n    return x * x\n\nsquares = list(map(f, range(1, 10)))\n```\n\nBoth methods produce the following list:\n\n```python\n[1, 4, 9, 16, 25, 36, 49, 64, 81]\n```\n\nLastly, the `reduce` function processes the elements in a list through a user-defined function and returns a single value. The function works by first processing the first two items of the list. The result of this is processed by the function, along with the next item in the list. This continues for all of the remaining items in the list. The format for the `reduce` function is as follows:\n\n```python\nreduce(function, list)\n```\n\nAgain, the parameters are the same as specified for the previous functions. Suppose, for example, that you want to compute the factorial of 10. Here's one way to do this:\n\n```python\nfact = 1\nfor i in range(1, 11):\n    fact *= i\n```\n\nFinally, here's how to do it with the `reduce` function. Note that the `reduce` function comes from the `functools` module that is part of Python. This means we need to import the function from that module before we can use it:\n\n```python\nfrom functools import reduce\ndef f(x, y):\n    return x * y\n\nfact = reduce(f, range(1, 11))\n```\n\nBoth methods calculate the factorial of 10 (which is 3628800).\nThe following table summarizes the list functions discussed above:\n\n|Function  |Purpose    | Syntax    | Returns |\n|:---      |:--------- |:--------- | :---    |\n| `filter` | Select list elements using a function              | `filter(function, list)` | iterator |\n| `map`    | Apply a function to every list element             | `map(function, list)`    | iterator |\n| `reduce` | Reduce a list to a single value using a function   | `reduce(function, list)` | value    |\n\n\n## List Comprehensions\n\nConsider the simple problem of creating a list of the cubes of the integers 0, 1, 2, etc, up to 9 (i.e., 0, 1, 8, 27, 64, ..., 729).\n\n::: {.callout-tip title=\"Practice\"}\nTry to write a snippet of Python code that accomplishes the above before continuing.\n:::\n\nAnother way uses a concept known as **list comprehensions**. \n\nA **list comprehension** provides a simple, concise way of creating lists (even complex ones). The most common use of this concept creates a list where each element is the result of some operation or expression applied to each element of another list. \n\nHere's an example that does the same thing as the snippet of code above:\n\n```python\ncubes = [x * x * x for x in range(10)]\n```\n\nYes, it's a single statement! A **list comprehension** uses the for loop to generate or to iterate through the items of a sequence and applies some operation or expression to each of those items. In the statement above, the generated sequence is the range of values from 0 through 9. The expression that is applied to each of the elements in the generated sequence is `x * x * x` (i.e., it cubes each element). The result is a new list of the cubes of the elements in the generated sequence (0 through 9):\n\n```python\n[0, 1, 8, 27, 64, 125, 216, 343, 512, 729]\n```\n\nThe list comprehension can be read in English as, \n\n>the variable cubed is to be a list that contains some x cubed for each x in the range 0 through 9.\n\nIn fact, we can map the English version to the Python statement:\n\n[insert table]\n\nMinimally, a list comprehension consists of brackets containing an expression (e.g., `x * x * x`) followed by a for-loop. Additional for-loops or even if-statements can be chained after the first for-loop.\nThe resulting list is an evaluation of the expression in the context of the for-loops and if-statements that follow it. Here's a seemingly convoluted example:\n\n```python\nsums = [x + y for x in [1, 2, 3] for y in [3, 1, 4] if x != y]\n```\n\nThe output of this statement is:\n```python\n[4, 5, 5, 3, 6, 4, 7]\n```\n\nThis statement generates a list of the sums of the pairs that can be formed by combining a single element from the first list `[1, 2, 3]` with a single element from the second list `[3, 1, 4]`, **so long as the elements differ** (i.e., `if x != y`). The elements of each list are processed from left-to-right. The first sum is calculated by adding the first element of the first list to the first element of the second list (1 + 3 = 4). The second sum is calculated by adding the first element of the first list to the third element of the second list (1 + 4 = 5). Why the third element and not the second? Because this would mean that both elements have the same value (1). The if statement ensures that sums will only be produced if the list elements differ.\n\nHere's another (similar) example of list comprehension:\n\n```python\npairs = [[x, y] for x in [1, 2, 3] for y in [3, 1, 4] if x < y]\n```\n\nThe output of this statement is:\n\n```python\n[[1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n```\n\nThis statement generates a list of the pairs that can be formed by combining a single element from the first list ([1, 2, 3]) with a single element from the second list ([3, 1, 4]), **so long as the element from the first list is less than the element from the second list**. Again, the list elements are processed from left-to-right. It is similar to the previous statement; however, instead of generating a list of sums, a list of pairs of elements is generated. In fact, it's a list of lists! The enclosed sublists are composed of only two elements each.\n\nReally cool things can be done with list comprehension. For example, here's a neat way to compute pi to various precisions from two through eight digits:\n\n```python\nfrom math import pi\n\npi_digits = [round(pi, n) for n in range(2, 9)]\n```\n\nAnd here's the output:\n\n```python\n[3.14, 3.142, 3.1416, 3.14159, 3.141593, 3.1415927, 3.14159265]\n```\n\nThe function `round` does what you expect it to do: it *rounds* the value specified in the first parameter to a precision specified in the second parameter. For example, the expression `round(pi, 3)` rounds pi to three digits to the right of the decimal point (i.e., 3.142).\n\n## Sets\n\nIn Python, a set is just another type of sequence. The mathematical definition of a set is an unordered collection of unique elements. That is, a set is basically just a list with no duplicates.\n\n::: {.callout-tip title=\"Definition\"}\nA **set** is a type of Python sequence that contains an unordered collection of unique values.\n:::\n\nSince sets are mathematically defined, they support mathematical operations such as union, intersection, and difference. Defining a set can be done in several ways. The first is to formally define one, very much like you would define a list. However, instead of using square brackets, we use curly braces:\n\n```python\na = { 1, 2, 3, 4, 5 }\nb = { 3, 4, 5, 6, 7 }\n```\n\nThese Python statements declare and initialize two sets, `a` and `b`. Another way to create a set is to do so from some other sequence (such as a list):\n\n```python\nc = [ 3, 1, 4, 1, 5, 9 ]\nd = set(c)\n```\n\nThe list `c` is used as input to create the set `d`. The set `d` will only have one instance of any duplicated element in the list `c`; therefore, the value of the set `d` is as follows:\n\n```python\n{1, 3, 4, 5, 9}\n```\n\nNote that the element 1 appears only once in the set `d`. In addition, the set is unordered; that is, its elements don't necessarily have to be in the same order as those in the list.\n\nA set can even be created from a string (since a string is a sequence):\n\n```python\ne = set(\"sweet\") \n```\n\nThe value of the set `e` is as follows:\n\n```python\n{'s', 't', 'w', 'e'}\n```\n\nAgain, note that the elements of this set are unique. To illustrate the set operations (union, intersection, and difference), we will use the sets `a` and `b` defined above. The **union** of the sets `a` and `b` represents the elements **in either a or b**. The Python expression for this is written as `a | b`. \n\nIts output is the following set:\n\n```python\n{1, 2, 3, 4, 5, 6, 7}\n```\n\nThese elements are all of the unique elements in `a` or `b`. Similarly, the **intersection** of the sets `a` and `b` represents the elements **in both a and b**. The Python expression for this is written as `a & b`. Its output is the following set:\n\n```python\n{3, 4, 5}\n```\n\nThese elements are the only unique elements in both `a` and `b`. Lastly, the **difference** of the sets `a` and `b` represents the elements **in a but not in b**. The Python expression for this is written as `a – b`. Its output is the following set:\n\n```python\n{1, 2}\n```\n\nThe difference operation can be thought of as a subtraction of the set `b` from the set `a`. All elements in both `a` and `b` are removed. The remaining elements in a make up the resulting set. Any additional elements in `b` that are not in `a` are ignored.\n\n## Dictionaries\n\nA dictionary is perhaps one of the most powerful data structures at our disposal in Python. As you have seen, sequences (like lists) are indexed by a range of numbers (i.e., the first element is placed at index 0, the second element is placed at index 1, and so on).\n\nDefinition: A dictionary is a data structure whose elements are indexed by unique keys. A key is just an unchangeable value. The elements are known as values, and are associated with the keys. That is, a single key maps to a single value. This is why we often say that dictionaries contain key-value pairs.\n\nTechnically, a list pairs an index (which could be called a key) with a value (the element at that index). The difference is that dictionaries permit keys to be of almost any type, so long as a key is not susceptible to change. That is, it must be immutable. For example, the integer 5, the floating point number 3.14, the string “Jones”, and the character '%' are all valid keys. Note that all keys in a single dictionary must be unique (i.e., there can be no duplicate keys).\n\nConsider a dictionary that you are familiar with: the kind that you lookup the definitions of words in. Using such a dictionary typically involves searching for some word in order to obtain its definition. In such a dictionary, the word is the key, and its definition is the value associated with that key. You should have noticed that, to search a dictionary, the key is required. The unknown is the value that is associated with the key (a definition). In some programming languages, this type of data structure is known as an associative array.\n\nAnother dictionary data structure that you are probably familiar with is a phone book (although you've probably only used some online version and not an actual book). What are the keys in a phone book? What about the values? Clearly, a name is the key (e.g., Bob Jones). The values associated with the keys are records that contain an address and a phone number. Certainly, such records can be represented as long strings (perhaps even with newlines). But we may also wish to represent the records as objects of some PersonInfo class!\n\nDictionaries are created similarly to sets (using braces). The difference is that key-value pairs are specified in the format key: value. Here's an example of a dictionary with strings representing last names as the keys and integers representing office numbers as the values:\n\n```python\noffices = { \"Jones\": 247, \"Smith\": 121, \"Kennedy\": 108 } \n```\n\nThis creates a dictionary with the following key-value pairs (in no particular order):\n\n|Last Name | Office Number |\n|:--- |:--- |\n|Jones |247 |\n|Smith|121|\n|Kennedy|108|\n\nThe main operations associated with a dictionary are to store some key-value pair and to retrieve a value associated with a key. Adding the new key-value pair \"Wilkerson\": 355, for example, can be added to the dictionary above as follows:\n\n```python\noffices[\"Wilkerson\"] = 355\n```\n\nThe dictionary now has the following key-value pairs (in no particular order):\n\n|Last Name | Office Number |\n|:--- |:--- |\n|Jones |247 |\n|Smith|121|\n|Kennedy|108|\n|Wilkerson|355|\n\nRetrieving a value matching the key \"Smith\", for example, can be done as follows: \n\n```python\nloc = offices[\"Smith\"]\n```\n\nThe value of the variable loc is therefore 121. Note that attempting to retrieve a value using a key that is not in the dictionary results in an error.\n\nAn existing key-value pair in the dictionary may be overwritten by simply inserting a new value with the same key. For example, suppose that Kennedy changed offices (to, say, 111). The dictionary can be updated as follows:\n\n```python\noffices[\"Kennedy\"] = 111\n```\n\nThe dictionary now has the following key-value pairs (in no particular order):\n\n|Last Name | Office Number |\n|:--- |:--- |\n|Jones |247 |\n|Smith|121|\n|Kennedy|111|\n|Wilkerson|355|\n\nA key-value pair can be removed from the dictionary using the del keyword as follows: \n\n```python\ndel offices[\"Smith\"]\n```\n\nThe dictionary now has the following key-value pairs (in no particular order):\n\n|Last Name | Office Number |\n|:--- |:--- |\n|Jones |247 |\n|Kennedy|111|\n|Wilkerson|355|\n\nDetermining if a key is in the dictionary without actually returning the value associated with the key can be done by using the keyword in as follows:\n\n```python\n\"Kennedy\" in offices # true\n\"Smith\" in offices # false (since it was just removed)\n```\n\n```python\nif (\"Smith\" in offices):\n    ...\n```\n\nThe keys and values in a dictionary don't have to be homogeneous; that is, they can each be of different types. For instance, the following key-value pair could be added to the dictionary:\n\n```python\noffices[12345] = \"abracadabra\"\n```\n\nAlthough it doesn't necessarily make sense, the dictionary now has the following key-value pairs (in no\nparticular order):\n\n|Last Name | Office Number |\n|:--- |:--- |\n|Jones |247 |\n|Kennedy|111|\n|Wilkerson|355|\n|12345|abracadabra|\n\nA neat way to obtain a list of all of the keys in a dictionary is to use the keys function as follows: \n\n```python\noffice_keys = list(offices.keys())\n```\n\nThe keys function returns a “view” object that can be converted into a list by using the list constructor (similar to how we used it for the filter and map functions). The variable office_keys above then has the following value:\n\n```python\n['Jones', 12345, 'Wilkerson', 'Kennedy']\n```\n\nThere are several ways of iterating through the values of a dictionary. One uses the keys function just described. This can be accomplished as follows:\n\n```python\nfor k in offices.keys():\n    print(offices[k])\n```\n\nNote that we don’t need to convert the keys into a list if we are simply iterating through them. Of course, we can convert it to a list if we wanted to, but in the context above it isn’t necessary.\nThe output of this snippet of Python code is:\n\n```default\n247\nabracadabra\n355\n111\n```\n\nOf course, to produce a key-value pair mapping, only a small modification is required:\n\n```python\nfor k in offices.keys():\n    print(k, \"->\", offices[k])\n```\n\nThe output of this now includes both the keys and values:\n\n```default\nJones -> 247\n12345 -> abracadabra\nWilkerson -> 355\nKennedy -> 111\n```\n\nAnother way that Python provides to do the same thing and which produces the same output is to use the dictionary method items as follows:\n\n```python\nfor k, v in offices.items():\n    print(k, \"->\", v)\n```\n\nThe items function returns a view object that contains pairs of values, each of which is a key-value pair in the dictionary.\n\nNote that k and v are used to stand for key and value. Any variable name will do (as long as it is descriptive) but these are normally used by convention with dictionaries. Using key and value (or val) as opposed to k and v would also be perfectly fine.\n\n## Dictionary Comprehensions\n\nJust as with lists, comprehensions can be used to create dictionaries. Of course, these are known as dictionary comprehensions. Here's one that creates a dictionary with the key-value pairs such that the values are cubes of the keys, and the keys range from 1 through 5:\n\n```python\ndict = {x: x ** 3 for x in range(1, 6)}\n```\n\nThe created dictionary dict is therefore {1: 1, 2: 8, 3: 27, 4: 64, 5: 125}. The key- value pairs are specified in the dictionary comprehension as x: x**3 (i.e., a key is some value x, and its associated value is x cubed). The range for the values (1 through 5) taken on by the variable x is specified as for x in range(1, 6).\n\nIn the space below, try to modify the dictionary comprehension above so that the values are stored as strings instead of integers:\n\n[ref: blank square for students]\n\n## Activity: Room Adventure...Reloaded\n\nIn this activity, we will update the Room Adventure game that was designed in a previous RPi activity. The goal will be to replace the parallel arrays in the game with dictionaries. Such a substitution makes sense because parallel arrays associate (or map) the elements of two or more arrays by index value.\n\nThat is, the first element of one array is paired with the first element of another, and so on. Dictionaries are perfectly suited for this because they associate one value with another!\n\nRecall that parallel arrays were used to represent the following relationships:\n(1) Exits with exit locations (through the lists exits and exitLocations); and\n(2) Items with item descriptions (through the lists items and itemDescriptions).\n\nExits were strings like “north” and “west”, and exit locations were rooms (instances of the class Room). Items were strings like “table” and “fireplace”, and item descriptions were strings like “It is made of oak. A golden key rests on it.” and “It is full of ashes.”\n\nVery quickly, we see that we can replace the lists exits and exitLocations with a single dictionary (perhaps just called exits). Suppose, for example, that an exit to the east led to some instance of a room represented by the variable r2, and an exit to the north led to some instance of a room represented by the variable r3. A dictionary that represents this could be created as follows:\n\n```python\nexits = {\"east\": r2, \"north\": r3} \n```\n\nOf course, this supposes that the variables r2 and r3 exist.\n\n**Step 1: Replace the parallel lists with dictionaries**\n\nThe first thing to do to modify our game is to remove the parallel arrays for both exits and items, and replace them with dictionaries. This must be done in the constructor of the Room class; specifically, in lines 16 through 19:\n\n```default\n14: def __init__(self, name): \n15:     self.name = name\n16:     self.exits = []\n17:     self.exitLocations = []\n18:     self.items = []\n19:     self.itemDescriptions = []\n20:     self.grabbables = []\n```\n\nA few notes: (1) line numbers specified in this activity are valid only within the existing source code (i.e., not the one that is being modified because changes may invalidate the line numbers); and (2) some comments in the source code have been removed in this activity for brevity. The statements on lines 16 through 19 are the parallel arrays that will need to be replaced with dictionaries. The lists exits and exitLocations are paired; so are the lists items and itemDescriptions. Let's replace them with two dictionaries instead:\n\n```default\ndef __init__(self, name): \n    self.name = name\n    self.exits = {}\n    self.items = {}\n    self.grabbables = []\n```\n\nThe highlighted statements are the two new dictionaries. There is no longer a need for matching lists since the dictionaries intrinsically match keys to values! Pay attention to the braces (as opposed to brackets).\n\n**Step 2: Remove the accessors and mutators for the deleted parallel lists**\n\nRecall that accessors and mutators were implemented for each of a Room's instance variables. Since the lists exitLocations and itemDescriptions were removed, their respective accessors and mutators must also be removed. The existing accessors and mutators for the instance variables exits and items remain unchanged. In fact, they will work seamlessly with the new dictionaries.\n\nThe accessor and mutator for the old instance variable exitLocations are located on lines 39 through 45, and must be removed from the source code:\n\n```default\n39: @property\n40: def exitLocations(self):\n41:     return self._exitLocations \n42:\n43: @exitLocations.setter\n44: def exitLocations(self, value): \n45:     self._exitLocations = value\n```\n\nThe accessor and mutator for the old instance variable itemDescriptions are located on lines 55 through 61, and must also be removed from the source code:\n\n```default\n55: @property\n56: def itemDescriptions(self):\n57:     return self._itemDescriptions\n58:\n59: @itemDescriptions.setter\n60: def itemDescriptions(self, value):\n61:     self._itemDescriptions = value\n```\n\n**Step 3: Modify the addExit and addItem functions**\n\nThe next step is to change the addExit and addItem functions in the Room class so that they appropriately insert new exits and items into dictionaries instead of parallel lists as is currently done. First, let's change the addExit function, which begins on line 74:\n\n```default\n74: def addExit(self, exit, room):\n75:     # append the exit and room to the appropriate lists \n76:     self._exits.append(exit)\n77:     self._exitLocations.append(room)\n```\n\nNote how the function currently appends the exit to one list and the room to another. Let's change this so that the exit and room are added as a key-value pair to the appropriate dictionary:\n\n```default\ndef addExit(self, exit, room):\n    # append the exit and room to the appropriate dictionary\n    self._exits[exit] = room\n```\n\nNow, let's change the addItem function, which begins on line 82:\n\n```default\n82: def addItem(self, item, desc):\n83:     # append the item and description to the appropriate lists\n84:     self._items.append(item)\n85:     self._itemDescriptions.append(desc)\n```\n\nThis function is similar to the old addExit function. It appends the item to one list and the description to another. Let's change this so that the item and description are added as a key-value pair to the appropriate dictionary:\n\n```default\ndef addItem(self, item, desc):\n    # append the item and description to the appropriate dictionary\n    self._items[item] = desc\n```\n\n**Step 4: Modify the __str__ function**\n\nIn the game, the player is continually presented with the status: location, items, exits, and inventory. This is specified in the Room class and specifically involves the bit of source code that generates the string representation of a Room. This is done in the `__str__` function, which begins on line 100:\n\n```default\n100: def __str__(self):\n101:     # first, the room name\n102:     s = \"You are in {}.\\n\".format(self.name)\n103:\n104:     # next, the items in the room\n105:     s += \"You see: \"\n106:     for item in self.items:\n107:         s += item + \" \"\n108:     s += \"\\n\"\n109:\n110:     # next, the exits from the room\n111:     s += \"Exits: \"\n112:     for exit in self.exits:\n113:         s += exit + \" \"\n114:\n115:     return s\n```\n\nThe statements that need to be changed are on lines 106 and 112. In their current form, they iterate through the two lists. The list items used to contain the items (e.g., table). Since items is now a dictionary (with the items as keys and item descriptions as values), then we must iterate through its keys! This can be done by replacing line 106 with the following statement:\n\nfor item in self.items.keys():\n\nSimilarly, The list exits used to contain the exits (e.g., south). Since exits is now a dictionary\n(with the exits as keys and room objects as values), then we must also iterate through its keys. This can be done by replacing line 112 with the following statement:\n\nfor exit in self.exits.keys():\n\n**Step 5: Modify the main part of the program**\n\nThere are two places that need modification in the main part of the program. Both are required because the current source code refers to the old lists that have been replaced by dictionaries. The first modification occurs in the part of the source code that is executed if the verb in the action specified by the player is go (e.g., “go south”). This part of the source code begins on line 247. Note that some of the next part of the if statement is provided for clarity:\n\n```default\n247: if (verb == \"go\"):\n248:     # set a default response\n249:     response = \"Invalid exit.\"\n250:\n251:     # check for valid exits in the current room\n252:     for i in range(len(currentRoom.exits)):\n253:         # a valid exit is found\n254:         if (noun == currentRoom.exits[i]):\n255:             # change the current room to the one ...\n256:             currentRoom = currentRoom.exitLocations[i]\n257:             # set the response (success)\n258:             response = \"Room changed.\"\n259:             # no need to check any more exits\n260:             break\n261: # the verb is: look \n262: elif (verb == \"look\"): \n263: ...\n```\n\nCurrently, the algorithm iterates through the list of exits. If one matches the noun specified by the player, then the current room is changed to the matching exit location (in the parallel list). If this occurs, the break statement exits the loop (i.e., we don't need to check for more exits since a valid one has already been found). The changes required affect the highlighted lines in the snippet of source code above. Ultimately, the part of the if statement that is executed if the verb is go should be changed to the following source code. Again, some of the next part of the if statement is provided for clarity:\n\n```default\n# the verb is: go \nif (verb == \"go\"):\n    # set a default response\n    response = \"Invalid exit.\"\n    \n    # check for valid exits in the current room\n    if (noun in currentRoom.exits):\n        # if one is found, change the current room ... \n        currentRoom = currentRoom.exits[noun]\n        # set the response (success)\n        response = \"Room changed.\"\n\n# the verb is: look \nelif (verb == \"look\"):\n    ...\n```\n\nNote that no break statement is required because there is no enclosing loop! The second modification occurs in the part of the source code that is executed if the verb in the action specified by the player is look (e.g., “look table”). This part of the source code begins on line 261. Again, some of the next part of the if statement is provided for clarity:\n\n```default\n261: # the verb is: look\n262: elif (verb == \"look\"):\n263:     # set a default response\n264:     response = \"I don't see that item.\"\n265:\n266:     \n267:     for i in range(len(currentRoom.items)):\n268:         # a valid item is found   \n269:         if  (noun == currentRoom.items[i]):\n270:             # set the response to the item's description\n271:             response = currentRoom.itemDescriptions[i]\n272:             # no need to check any more items\n273:             break\n274: # the verb is: take \n275: elif (verb == \"take\"):\n```\n\nAs before, the algorithm iterates through a list (of items in this case). If one matches the noun specified by the player, then the response is changed to the matching item description (in the parallel list). If this occurs, the break statement exits the loop (i.e., we don't need to check for more items since a valid one has already been found). The changes required affect the highlighted lines in the snippet of source code above. Ultimately, the part of the if statement that is executed if the verb is look should be changed to the following source code. Again, some of the next part of the if statement is provided for clarity:\n\n```default\n# the verb is: look \nelif (verb == \"look\"):\n    # set a default response\n    response = \"I don't see that item.\"\n    # check for valid items in the current room\n    if (noun in currentRoom.items):\n        # if one is found, set the response to the ... \n        response = currentRoom.items[noun]\n\n# the verb is: take \nelif (verb == \"take\"):\n```\n\nAnd that's it!\n\n## Wrapping Up Data Structures\n\nBy now, you should have a good idea of the need for data structures. Generally, programs that solve problems store and manipulate data in some way. Data structures make this possible. In this curriculum, various useful data structures were introduced. Here is a table that summarizes them:\n\n| Data structure            | Description   |\n|:---                       |:----------    |\n|Array                      |Similar pieces of data store in contiguous memory locations. Data values (elements) are stored at index locations. The size of an array must be known before using one.|\n|Linked list                |Similar pieces of data stored in nodes located in various memory locations. Nodes store data values and a link to the next node in memory. The list has a head (the first element) and a tail (the last element). The size of a linked list can grow or shrink as needed.|\n|Stack                      |A list-like structure where inserting and deleting is performed at one end (usually called the top of the stack). Inserting is called a push operation; deleting is called a pop operation. The last item inserted in a stack is the first item out of the stack; therefore, a stack is a LIFO (last-in, first-out) data structure.|\n|Queue                      |A list-like structure where inserting is performed at one end (usually called the back of the queue) and deleting is performed at the other end (usually called the front of the queue). Inserting is called an enqueue operation; deleting is called a dequeue operation. The first item inserted in a queue is the first item out of the queue; therefore, a queue is FIFO (first-in, first-out) data structure.|\n|Binary tree                |A tree-like data structure made up of nodes that store similar pieces of data. Each node has links to (up to) two children. The binary tree has a root (the top node) and leaves (nodes at the bottom with no children). From any node, a subtree can be described such that the node is the root of that subtree. |\n|Ordered binary tree        |A binary tree such that the values of all children in the left subtree of each node are less than the value of the node, and the values of all children in the right subtree of each node are greater than or equal to the value of the node. |\n|Dictionary                 |Also known as an associative array, a data structure that maps keys to values. Keys are unchangeable pieces of data; values are associated with keys (one value per key). |","srcMarkdownNoYaml":"\n\n## Introduction\n\nSo far, you have been introduced to various elementary and high level data structures: arrays, linked\nlists, stacks, queues, and binary trees. Specific to Python, you have used lists (similar to arrays) in your\nprograms. In this lesson, we will discuss some powerful functions that work with lists and introduce\nseveral new data structures.\n\n## Useful List Functions\n\nAs you have seen, Python lists are extremely useful data structures. In the first Python lesson, you were\nintroduced to several list functions that, for example, reverse a list, sort a list, etc. In this lesson, we will\ncover several more powerful built-in functions that are quite useful when used with lists.\n\nThe `filter` function returns an iterator that contains a new list consisting of only the items within an\nexisting list for which some user-defined function is true. The user-defined function can be anything\nthat evaluates an input in the existing list and returns true or false. The format for the `filter` function\nis as follows:\n\n```python\nfilter(function, mylist)\n```\n\nThe parameter `function` represents the name of the function that will evaluate each item in the\nexisting list. The parameter `mylist` is, of course, the existing list of items to evaluate.\n\nAn “iterator” is an object that contains a list. We can use iterators to operate on a list of values. To convert this iterator into a list object, that would expose the list it contains, we should wrap the call to filter with a list constructor:\n\n```python\nlist(filter(function, mylist))\n```\n\nThis converts the returned iterator into a list that we can print directly.\n\nSuppose, for example, that you want to find all of the multiples of three or five that are less than or equal to 30 and make a list of them. Here's one way to do this:\n\n```python\nmultiples = []\n\nfor i in range(3, 31):\n    if (i % 3 == 0 or i % 5 == 0):\n        multiples.append(i)\n```\n\nHowever, here's how it could be done with the `filter` function:\n\n\n```python\ndef f(x):\n    return (x % 3 == 0 or x % 5 == 0)\n\nmultiples = list(filter(f, range(3, 31)))\n```\n\nBoth of these methods generate the following list:\n\n```python\n[3, 5, 6, 9, 10, 12, 15, 18, 20, 21, 24, 25, 27, 30]\n```\n\nThe `map` function returns an iterator that contains a new list consisting of the return values generated by a user-defined function on each item in an existing list. The user-defined function is called for each item in the existing list; the return values form the new list. The format for the `map` function is as follows:\n\n```python\nmap(function, mylist)\n```\n\nLike the `filter` function, we need to wrap the call to `map` inside of a list constructor call:\n\n```python\nlist(map(function, mylist))\n```\n\nThe parameters are the same as specified for the `filter` function. Suppose, for example, that you want to square each item in a list. Here's one way to do this:\n\n```python\nsquares = list(range(1, 10))\n\nfor i in range(len(squares)):\n    squares[i] *= squares[i]\n```\n\nAlthough the snippet of code above does modify the existing list, it could be easily changed if needed.\nHere's how it could be done with the `map` function:\n\n```python\ndef f(x):\n    return x * x\n\nsquares = list(map(f, range(1, 10)))\n```\n\nBoth methods produce the following list:\n\n```python\n[1, 4, 9, 16, 25, 36, 49, 64, 81]\n```\n\nLastly, the `reduce` function processes the elements in a list through a user-defined function and returns a single value. The function works by first processing the first two items of the list. The result of this is processed by the function, along with the next item in the list. This continues for all of the remaining items in the list. The format for the `reduce` function is as follows:\n\n```python\nreduce(function, list)\n```\n\nAgain, the parameters are the same as specified for the previous functions. Suppose, for example, that you want to compute the factorial of 10. Here's one way to do this:\n\n```python\nfact = 1\nfor i in range(1, 11):\n    fact *= i\n```\n\nFinally, here's how to do it with the `reduce` function. Note that the `reduce` function comes from the `functools` module that is part of Python. This means we need to import the function from that module before we can use it:\n\n```python\nfrom functools import reduce\ndef f(x, y):\n    return x * y\n\nfact = reduce(f, range(1, 11))\n```\n\nBoth methods calculate the factorial of 10 (which is 3628800).\nThe following table summarizes the list functions discussed above:\n\n|Function  |Purpose    | Syntax    | Returns |\n|:---      |:--------- |:--------- | :---    |\n| `filter` | Select list elements using a function              | `filter(function, list)` | iterator |\n| `map`    | Apply a function to every list element             | `map(function, list)`    | iterator |\n| `reduce` | Reduce a list to a single value using a function   | `reduce(function, list)` | value    |\n\n\n## List Comprehensions\n\nConsider the simple problem of creating a list of the cubes of the integers 0, 1, 2, etc, up to 9 (i.e., 0, 1, 8, 27, 64, ..., 729).\n\n::: {.callout-tip title=\"Practice\"}\nTry to write a snippet of Python code that accomplishes the above before continuing.\n:::\n\nAnother way uses a concept known as **list comprehensions**. \n\nA **list comprehension** provides a simple, concise way of creating lists (even complex ones). The most common use of this concept creates a list where each element is the result of some operation or expression applied to each element of another list. \n\nHere's an example that does the same thing as the snippet of code above:\n\n```python\ncubes = [x * x * x for x in range(10)]\n```\n\nYes, it's a single statement! A **list comprehension** uses the for loop to generate or to iterate through the items of a sequence and applies some operation or expression to each of those items. In the statement above, the generated sequence is the range of values from 0 through 9. The expression that is applied to each of the elements in the generated sequence is `x * x * x` (i.e., it cubes each element). The result is a new list of the cubes of the elements in the generated sequence (0 through 9):\n\n```python\n[0, 1, 8, 27, 64, 125, 216, 343, 512, 729]\n```\n\nThe list comprehension can be read in English as, \n\n>the variable cubed is to be a list that contains some x cubed for each x in the range 0 through 9.\n\nIn fact, we can map the English version to the Python statement:\n\n[insert table]\n\nMinimally, a list comprehension consists of brackets containing an expression (e.g., `x * x * x`) followed by a for-loop. Additional for-loops or even if-statements can be chained after the first for-loop.\nThe resulting list is an evaluation of the expression in the context of the for-loops and if-statements that follow it. Here's a seemingly convoluted example:\n\n```python\nsums = [x + y for x in [1, 2, 3] for y in [3, 1, 4] if x != y]\n```\n\nThe output of this statement is:\n```python\n[4, 5, 5, 3, 6, 4, 7]\n```\n\nThis statement generates a list of the sums of the pairs that can be formed by combining a single element from the first list `[1, 2, 3]` with a single element from the second list `[3, 1, 4]`, **so long as the elements differ** (i.e., `if x != y`). The elements of each list are processed from left-to-right. The first sum is calculated by adding the first element of the first list to the first element of the second list (1 + 3 = 4). The second sum is calculated by adding the first element of the first list to the third element of the second list (1 + 4 = 5). Why the third element and not the second? Because this would mean that both elements have the same value (1). The if statement ensures that sums will only be produced if the list elements differ.\n\nHere's another (similar) example of list comprehension:\n\n```python\npairs = [[x, y] for x in [1, 2, 3] for y in [3, 1, 4] if x < y]\n```\n\nThe output of this statement is:\n\n```python\n[[1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n```\n\nThis statement generates a list of the pairs that can be formed by combining a single element from the first list ([1, 2, 3]) with a single element from the second list ([3, 1, 4]), **so long as the element from the first list is less than the element from the second list**. Again, the list elements are processed from left-to-right. It is similar to the previous statement; however, instead of generating a list of sums, a list of pairs of elements is generated. In fact, it's a list of lists! The enclosed sublists are composed of only two elements each.\n\nReally cool things can be done with list comprehension. For example, here's a neat way to compute pi to various precisions from two through eight digits:\n\n```python\nfrom math import pi\n\npi_digits = [round(pi, n) for n in range(2, 9)]\n```\n\nAnd here's the output:\n\n```python\n[3.14, 3.142, 3.1416, 3.14159, 3.141593, 3.1415927, 3.14159265]\n```\n\nThe function `round` does what you expect it to do: it *rounds* the value specified in the first parameter to a precision specified in the second parameter. For example, the expression `round(pi, 3)` rounds pi to three digits to the right of the decimal point (i.e., 3.142).\n\n## Sets\n\nIn Python, a set is just another type of sequence. The mathematical definition of a set is an unordered collection of unique elements. That is, a set is basically just a list with no duplicates.\n\n::: {.callout-tip title=\"Definition\"}\nA **set** is a type of Python sequence that contains an unordered collection of unique values.\n:::\n\nSince sets are mathematically defined, they support mathematical operations such as union, intersection, and difference. Defining a set can be done in several ways. The first is to formally define one, very much like you would define a list. However, instead of using square brackets, we use curly braces:\n\n```python\na = { 1, 2, 3, 4, 5 }\nb = { 3, 4, 5, 6, 7 }\n```\n\nThese Python statements declare and initialize two sets, `a` and `b`. Another way to create a set is to do so from some other sequence (such as a list):\n\n```python\nc = [ 3, 1, 4, 1, 5, 9 ]\nd = set(c)\n```\n\nThe list `c` is used as input to create the set `d`. The set `d` will only have one instance of any duplicated element in the list `c`; therefore, the value of the set `d` is as follows:\n\n```python\n{1, 3, 4, 5, 9}\n```\n\nNote that the element 1 appears only once in the set `d`. In addition, the set is unordered; that is, its elements don't necessarily have to be in the same order as those in the list.\n\nA set can even be created from a string (since a string is a sequence):\n\n```python\ne = set(\"sweet\") \n```\n\nThe value of the set `e` is as follows:\n\n```python\n{'s', 't', 'w', 'e'}\n```\n\nAgain, note that the elements of this set are unique. To illustrate the set operations (union, intersection, and difference), we will use the sets `a` and `b` defined above. The **union** of the sets `a` and `b` represents the elements **in either a or b**. The Python expression for this is written as `a | b`. \n\nIts output is the following set:\n\n```python\n{1, 2, 3, 4, 5, 6, 7}\n```\n\nThese elements are all of the unique elements in `a` or `b`. Similarly, the **intersection** of the sets `a` and `b` represents the elements **in both a and b**. The Python expression for this is written as `a & b`. Its output is the following set:\n\n```python\n{3, 4, 5}\n```\n\nThese elements are the only unique elements in both `a` and `b`. Lastly, the **difference** of the sets `a` and `b` represents the elements **in a but not in b**. The Python expression for this is written as `a – b`. Its output is the following set:\n\n```python\n{1, 2}\n```\n\nThe difference operation can be thought of as a subtraction of the set `b` from the set `a`. All elements in both `a` and `b` are removed. The remaining elements in a make up the resulting set. Any additional elements in `b` that are not in `a` are ignored.\n\n## Dictionaries\n\nA dictionary is perhaps one of the most powerful data structures at our disposal in Python. As you have seen, sequences (like lists) are indexed by a range of numbers (i.e., the first element is placed at index 0, the second element is placed at index 1, and so on).\n\nDefinition: A dictionary is a data structure whose elements are indexed by unique keys. A key is just an unchangeable value. The elements are known as values, and are associated with the keys. That is, a single key maps to a single value. This is why we often say that dictionaries contain key-value pairs.\n\nTechnically, a list pairs an index (which could be called a key) with a value (the element at that index). The difference is that dictionaries permit keys to be of almost any type, so long as a key is not susceptible to change. That is, it must be immutable. For example, the integer 5, the floating point number 3.14, the string “Jones”, and the character '%' are all valid keys. Note that all keys in a single dictionary must be unique (i.e., there can be no duplicate keys).\n\nConsider a dictionary that you are familiar with: the kind that you lookup the definitions of words in. Using such a dictionary typically involves searching for some word in order to obtain its definition. In such a dictionary, the word is the key, and its definition is the value associated with that key. You should have noticed that, to search a dictionary, the key is required. The unknown is the value that is associated with the key (a definition). In some programming languages, this type of data structure is known as an associative array.\n\nAnother dictionary data structure that you are probably familiar with is a phone book (although you've probably only used some online version and not an actual book). What are the keys in a phone book? What about the values? Clearly, a name is the key (e.g., Bob Jones). The values associated with the keys are records that contain an address and a phone number. Certainly, such records can be represented as long strings (perhaps even with newlines). But we may also wish to represent the records as objects of some PersonInfo class!\n\nDictionaries are created similarly to sets (using braces). The difference is that key-value pairs are specified in the format key: value. Here's an example of a dictionary with strings representing last names as the keys and integers representing office numbers as the values:\n\n```python\noffices = { \"Jones\": 247, \"Smith\": 121, \"Kennedy\": 108 } \n```\n\nThis creates a dictionary with the following key-value pairs (in no particular order):\n\n|Last Name | Office Number |\n|:--- |:--- |\n|Jones |247 |\n|Smith|121|\n|Kennedy|108|\n\nThe main operations associated with a dictionary are to store some key-value pair and to retrieve a value associated with a key. Adding the new key-value pair \"Wilkerson\": 355, for example, can be added to the dictionary above as follows:\n\n```python\noffices[\"Wilkerson\"] = 355\n```\n\nThe dictionary now has the following key-value pairs (in no particular order):\n\n|Last Name | Office Number |\n|:--- |:--- |\n|Jones |247 |\n|Smith|121|\n|Kennedy|108|\n|Wilkerson|355|\n\nRetrieving a value matching the key \"Smith\", for example, can be done as follows: \n\n```python\nloc = offices[\"Smith\"]\n```\n\nThe value of the variable loc is therefore 121. Note that attempting to retrieve a value using a key that is not in the dictionary results in an error.\n\nAn existing key-value pair in the dictionary may be overwritten by simply inserting a new value with the same key. For example, suppose that Kennedy changed offices (to, say, 111). The dictionary can be updated as follows:\n\n```python\noffices[\"Kennedy\"] = 111\n```\n\nThe dictionary now has the following key-value pairs (in no particular order):\n\n|Last Name | Office Number |\n|:--- |:--- |\n|Jones |247 |\n|Smith|121|\n|Kennedy|111|\n|Wilkerson|355|\n\nA key-value pair can be removed from the dictionary using the del keyword as follows: \n\n```python\ndel offices[\"Smith\"]\n```\n\nThe dictionary now has the following key-value pairs (in no particular order):\n\n|Last Name | Office Number |\n|:--- |:--- |\n|Jones |247 |\n|Kennedy|111|\n|Wilkerson|355|\n\nDetermining if a key is in the dictionary without actually returning the value associated with the key can be done by using the keyword in as follows:\n\n```python\n\"Kennedy\" in offices # true\n\"Smith\" in offices # false (since it was just removed)\n```\n\n```python\nif (\"Smith\" in offices):\n    ...\n```\n\nThe keys and values in a dictionary don't have to be homogeneous; that is, they can each be of different types. For instance, the following key-value pair could be added to the dictionary:\n\n```python\noffices[12345] = \"abracadabra\"\n```\n\nAlthough it doesn't necessarily make sense, the dictionary now has the following key-value pairs (in no\nparticular order):\n\n|Last Name | Office Number |\n|:--- |:--- |\n|Jones |247 |\n|Kennedy|111|\n|Wilkerson|355|\n|12345|abracadabra|\n\nA neat way to obtain a list of all of the keys in a dictionary is to use the keys function as follows: \n\n```python\noffice_keys = list(offices.keys())\n```\n\nThe keys function returns a “view” object that can be converted into a list by using the list constructor (similar to how we used it for the filter and map functions). The variable office_keys above then has the following value:\n\n```python\n['Jones', 12345, 'Wilkerson', 'Kennedy']\n```\n\nThere are several ways of iterating through the values of a dictionary. One uses the keys function just described. This can be accomplished as follows:\n\n```python\nfor k in offices.keys():\n    print(offices[k])\n```\n\nNote that we don’t need to convert the keys into a list if we are simply iterating through them. Of course, we can convert it to a list if we wanted to, but in the context above it isn’t necessary.\nThe output of this snippet of Python code is:\n\n```default\n247\nabracadabra\n355\n111\n```\n\nOf course, to produce a key-value pair mapping, only a small modification is required:\n\n```python\nfor k in offices.keys():\n    print(k, \"->\", offices[k])\n```\n\nThe output of this now includes both the keys and values:\n\n```default\nJones -> 247\n12345 -> abracadabra\nWilkerson -> 355\nKennedy -> 111\n```\n\nAnother way that Python provides to do the same thing and which produces the same output is to use the dictionary method items as follows:\n\n```python\nfor k, v in offices.items():\n    print(k, \"->\", v)\n```\n\nThe items function returns a view object that contains pairs of values, each of which is a key-value pair in the dictionary.\n\nNote that k and v are used to stand for key and value. Any variable name will do (as long as it is descriptive) but these are normally used by convention with dictionaries. Using key and value (or val) as opposed to k and v would also be perfectly fine.\n\n## Dictionary Comprehensions\n\nJust as with lists, comprehensions can be used to create dictionaries. Of course, these are known as dictionary comprehensions. Here's one that creates a dictionary with the key-value pairs such that the values are cubes of the keys, and the keys range from 1 through 5:\n\n```python\ndict = {x: x ** 3 for x in range(1, 6)}\n```\n\nThe created dictionary dict is therefore {1: 1, 2: 8, 3: 27, 4: 64, 5: 125}. The key- value pairs are specified in the dictionary comprehension as x: x**3 (i.e., a key is some value x, and its associated value is x cubed). The range for the values (1 through 5) taken on by the variable x is specified as for x in range(1, 6).\n\nIn the space below, try to modify the dictionary comprehension above so that the values are stored as strings instead of integers:\n\n[ref: blank square for students]\n\n## Activity: Room Adventure...Reloaded\n\nIn this activity, we will update the Room Adventure game that was designed in a previous RPi activity. The goal will be to replace the parallel arrays in the game with dictionaries. Such a substitution makes sense because parallel arrays associate (or map) the elements of two or more arrays by index value.\n\nThat is, the first element of one array is paired with the first element of another, and so on. Dictionaries are perfectly suited for this because they associate one value with another!\n\nRecall that parallel arrays were used to represent the following relationships:\n(1) Exits with exit locations (through the lists exits and exitLocations); and\n(2) Items with item descriptions (through the lists items and itemDescriptions).\n\nExits were strings like “north” and “west”, and exit locations were rooms (instances of the class Room). Items were strings like “table” and “fireplace”, and item descriptions were strings like “It is made of oak. A golden key rests on it.” and “It is full of ashes.”\n\nVery quickly, we see that we can replace the lists exits and exitLocations with a single dictionary (perhaps just called exits). Suppose, for example, that an exit to the east led to some instance of a room represented by the variable r2, and an exit to the north led to some instance of a room represented by the variable r3. A dictionary that represents this could be created as follows:\n\n```python\nexits = {\"east\": r2, \"north\": r3} \n```\n\nOf course, this supposes that the variables r2 and r3 exist.\n\n**Step 1: Replace the parallel lists with dictionaries**\n\nThe first thing to do to modify our game is to remove the parallel arrays for both exits and items, and replace them with dictionaries. This must be done in the constructor of the Room class; specifically, in lines 16 through 19:\n\n```default\n14: def __init__(self, name): \n15:     self.name = name\n16:     self.exits = []\n17:     self.exitLocations = []\n18:     self.items = []\n19:     self.itemDescriptions = []\n20:     self.grabbables = []\n```\n\nA few notes: (1) line numbers specified in this activity are valid only within the existing source code (i.e., not the one that is being modified because changes may invalidate the line numbers); and (2) some comments in the source code have been removed in this activity for brevity. The statements on lines 16 through 19 are the parallel arrays that will need to be replaced with dictionaries. The lists exits and exitLocations are paired; so are the lists items and itemDescriptions. Let's replace them with two dictionaries instead:\n\n```default\ndef __init__(self, name): \n    self.name = name\n    self.exits = {}\n    self.items = {}\n    self.grabbables = []\n```\n\nThe highlighted statements are the two new dictionaries. There is no longer a need for matching lists since the dictionaries intrinsically match keys to values! Pay attention to the braces (as opposed to brackets).\n\n**Step 2: Remove the accessors and mutators for the deleted parallel lists**\n\nRecall that accessors and mutators were implemented for each of a Room's instance variables. Since the lists exitLocations and itemDescriptions were removed, their respective accessors and mutators must also be removed. The existing accessors and mutators for the instance variables exits and items remain unchanged. In fact, they will work seamlessly with the new dictionaries.\n\nThe accessor and mutator for the old instance variable exitLocations are located on lines 39 through 45, and must be removed from the source code:\n\n```default\n39: @property\n40: def exitLocations(self):\n41:     return self._exitLocations \n42:\n43: @exitLocations.setter\n44: def exitLocations(self, value): \n45:     self._exitLocations = value\n```\n\nThe accessor and mutator for the old instance variable itemDescriptions are located on lines 55 through 61, and must also be removed from the source code:\n\n```default\n55: @property\n56: def itemDescriptions(self):\n57:     return self._itemDescriptions\n58:\n59: @itemDescriptions.setter\n60: def itemDescriptions(self, value):\n61:     self._itemDescriptions = value\n```\n\n**Step 3: Modify the addExit and addItem functions**\n\nThe next step is to change the addExit and addItem functions in the Room class so that they appropriately insert new exits and items into dictionaries instead of parallel lists as is currently done. First, let's change the addExit function, which begins on line 74:\n\n```default\n74: def addExit(self, exit, room):\n75:     # append the exit and room to the appropriate lists \n76:     self._exits.append(exit)\n77:     self._exitLocations.append(room)\n```\n\nNote how the function currently appends the exit to one list and the room to another. Let's change this so that the exit and room are added as a key-value pair to the appropriate dictionary:\n\n```default\ndef addExit(self, exit, room):\n    # append the exit and room to the appropriate dictionary\n    self._exits[exit] = room\n```\n\nNow, let's change the addItem function, which begins on line 82:\n\n```default\n82: def addItem(self, item, desc):\n83:     # append the item and description to the appropriate lists\n84:     self._items.append(item)\n85:     self._itemDescriptions.append(desc)\n```\n\nThis function is similar to the old addExit function. It appends the item to one list and the description to another. Let's change this so that the item and description are added as a key-value pair to the appropriate dictionary:\n\n```default\ndef addItem(self, item, desc):\n    # append the item and description to the appropriate dictionary\n    self._items[item] = desc\n```\n\n**Step 4: Modify the __str__ function**\n\nIn the game, the player is continually presented with the status: location, items, exits, and inventory. This is specified in the Room class and specifically involves the bit of source code that generates the string representation of a Room. This is done in the `__str__` function, which begins on line 100:\n\n```default\n100: def __str__(self):\n101:     # first, the room name\n102:     s = \"You are in {}.\\n\".format(self.name)\n103:\n104:     # next, the items in the room\n105:     s += \"You see: \"\n106:     for item in self.items:\n107:         s += item + \" \"\n108:     s += \"\\n\"\n109:\n110:     # next, the exits from the room\n111:     s += \"Exits: \"\n112:     for exit in self.exits:\n113:         s += exit + \" \"\n114:\n115:     return s\n```\n\nThe statements that need to be changed are on lines 106 and 112. In their current form, they iterate through the two lists. The list items used to contain the items (e.g., table). Since items is now a dictionary (with the items as keys and item descriptions as values), then we must iterate through its keys! This can be done by replacing line 106 with the following statement:\n\nfor item in self.items.keys():\n\nSimilarly, The list exits used to contain the exits (e.g., south). Since exits is now a dictionary\n(with the exits as keys and room objects as values), then we must also iterate through its keys. This can be done by replacing line 112 with the following statement:\n\nfor exit in self.exits.keys():\n\n**Step 5: Modify the main part of the program**\n\nThere are two places that need modification in the main part of the program. Both are required because the current source code refers to the old lists that have been replaced by dictionaries. The first modification occurs in the part of the source code that is executed if the verb in the action specified by the player is go (e.g., “go south”). This part of the source code begins on line 247. Note that some of the next part of the if statement is provided for clarity:\n\n```default\n247: if (verb == \"go\"):\n248:     # set a default response\n249:     response = \"Invalid exit.\"\n250:\n251:     # check for valid exits in the current room\n252:     for i in range(len(currentRoom.exits)):\n253:         # a valid exit is found\n254:         if (noun == currentRoom.exits[i]):\n255:             # change the current room to the one ...\n256:             currentRoom = currentRoom.exitLocations[i]\n257:             # set the response (success)\n258:             response = \"Room changed.\"\n259:             # no need to check any more exits\n260:             break\n261: # the verb is: look \n262: elif (verb == \"look\"): \n263: ...\n```\n\nCurrently, the algorithm iterates through the list of exits. If one matches the noun specified by the player, then the current room is changed to the matching exit location (in the parallel list). If this occurs, the break statement exits the loop (i.e., we don't need to check for more exits since a valid one has already been found). The changes required affect the highlighted lines in the snippet of source code above. Ultimately, the part of the if statement that is executed if the verb is go should be changed to the following source code. Again, some of the next part of the if statement is provided for clarity:\n\n```default\n# the verb is: go \nif (verb == \"go\"):\n    # set a default response\n    response = \"Invalid exit.\"\n    \n    # check for valid exits in the current room\n    if (noun in currentRoom.exits):\n        # if one is found, change the current room ... \n        currentRoom = currentRoom.exits[noun]\n        # set the response (success)\n        response = \"Room changed.\"\n\n# the verb is: look \nelif (verb == \"look\"):\n    ...\n```\n\nNote that no break statement is required because there is no enclosing loop! The second modification occurs in the part of the source code that is executed if the verb in the action specified by the player is look (e.g., “look table”). This part of the source code begins on line 261. Again, some of the next part of the if statement is provided for clarity:\n\n```default\n261: # the verb is: look\n262: elif (verb == \"look\"):\n263:     # set a default response\n264:     response = \"I don't see that item.\"\n265:\n266:     \n267:     for i in range(len(currentRoom.items)):\n268:         # a valid item is found   \n269:         if  (noun == currentRoom.items[i]):\n270:             # set the response to the item's description\n271:             response = currentRoom.itemDescriptions[i]\n272:             # no need to check any more items\n273:             break\n274: # the verb is: take \n275: elif (verb == \"take\"):\n```\n\nAs before, the algorithm iterates through a list (of items in this case). If one matches the noun specified by the player, then the response is changed to the matching item description (in the parallel list). If this occurs, the break statement exits the loop (i.e., we don't need to check for more items since a valid one has already been found). The changes required affect the highlighted lines in the snippet of source code above. Ultimately, the part of the if statement that is executed if the verb is look should be changed to the following source code. Again, some of the next part of the if statement is provided for clarity:\n\n```default\n# the verb is: look \nelif (verb == \"look\"):\n    # set a default response\n    response = \"I don't see that item.\"\n    # check for valid items in the current room\n    if (noun in currentRoom.items):\n        # if one is found, set the response to the ... \n        response = currentRoom.items[noun]\n\n# the verb is: take \nelif (verb == \"take\"):\n```\n\nAnd that's it!\n\n## Wrapping Up Data Structures\n\nBy now, you should have a good idea of the need for data structures. Generally, programs that solve problems store and manipulate data in some way. Data structures make this possible. In this curriculum, various useful data structures were introduced. Here is a table that summarizes them:\n\n| Data structure            | Description   |\n|:---                       |:----------    |\n|Array                      |Similar pieces of data store in contiguous memory locations. Data values (elements) are stored at index locations. The size of an array must be known before using one.|\n|Linked list                |Similar pieces of data stored in nodes located in various memory locations. Nodes store data values and a link to the next node in memory. The list has a head (the first element) and a tail (the last element). The size of a linked list can grow or shrink as needed.|\n|Stack                      |A list-like structure where inserting and deleting is performed at one end (usually called the top of the stack). Inserting is called a push operation; deleting is called a pop operation. The last item inserted in a stack is the first item out of the stack; therefore, a stack is a LIFO (last-in, first-out) data structure.|\n|Queue                      |A list-like structure where inserting is performed at one end (usually called the back of the queue) and deleting is performed at the other end (usually called the front of the queue). Inserting is called an enqueue operation; deleting is called a dequeue operation. The first item inserted in a queue is the first item out of the queue; therefore, a queue is FIFO (first-in, first-out) data structure.|\n|Binary tree                |A tree-like data structure made up of nodes that store similar pieces of data. Each node has links to (up to) two children. The binary tree has a root (the top node) and leaves (nodes at the bottom with no children). From any node, a subtree can be described such that the node is the root of that subtree. |\n|Ordered binary tree        |A binary tree such that the values of all children in the left subtree of each node are less than the value of the node, and the values of all children in the right subtree of each node are greater than or equal to the value of the node. |\n|Dictionary                 |Also known as an associative array, a data structure that maps keys to values. Keys are unchangeable pieces of data; values are associated with keys (one value per key). |"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"number-sections":true,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","theme":"cosmo","title":"01 More On Data Structures","date":"August 24, 2023","jupyter":"python3"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}