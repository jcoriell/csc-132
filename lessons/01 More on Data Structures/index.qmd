---
title: "01 More On Data Structures"
date: "August 24, 2023"
toc: true
number-sections: true
format:
  html:
    code-fold: true
jupyter: python3
---

## Introduction

So far, you have been introduced to various elementary and high level data structures: arrays, linked
lists, stacks, queues, and binary trees. Specific to Python, you have used lists (similar to arrays) in your
programs. In this lesson, we will discuss some powerful functions that work with lists and introduce
several new data structures.

## Useful List Functions

As you have seen, Python lists are extremely useful data structures. In the first Python lesson, you were
introduced to several list functions that, for example, reverse a list, sort a list, etc. In this lesson, we will
cover several more powerful built-in functions that are quite useful when used with lists.

The `filter` function returns an iterator that contains a new list consisting of only the items within an
existing list for which some user-defined function is true. The user-defined function can be anything
that evaluates an input in the existing list and returns true or false. The format for the `filter` function
is as follows:

```python
filter(function, mylist)
```

The parameter `function` represents the name of the function that will evaluate each item in the
existing list. The parameter `mylist` is, of course, the existing list of items to evaluate.

An “iterator” is an object that contains a list. We can use iterators to operate on a list of values. To convert this iterator into a list object, that would expose the list it contains, we should wrap the call to filter with a list constructor:

```python
list(filter(function, mylist))
```

This converts the returned iterator into a list that we can print directly.

Suppose, for example, that you want to find all of the multiples of three or five that are less than or equal to 30 and make a list of them. Here's one way to do this:

```python
multiples = []

for i in range(3, 31):
    if (i % 3 == 0 or i % 5 == 0):
        multiples.append(i)
```

However, here's how it could be done with the `filter` function:


```python
def f(x):
    return (x % 3 == 0 or x % 5 == 0)

multiples = list(filter(f, range(3, 31)))
```

Both of these methods generate the following list:

```python
[3, 5, 6, 9, 10, 12, 15, 18, 20, 21, 24, 25, 27, 30]
```

The `map` function returns an iterator that contains a new list consisting of the return values generated by a user-defined function on each item in an existing list. The user-defined function is called for each item in the existing list; the return values form the new list. The format for the `map` function is as follows:

```python
map(function, mylist)
```

Like the `filter` function, we need to wrap the call to `map` inside of a list constructor call:

```python
list(map(function, mylist))
```

The parameters are the same as specified for the `filter` function. Suppose, for example, that you want to square each item in a list. Here's one way to do this:

```python
squares = list(range(1, 10))

for i in range(len(squares)):
    squares[i] *= squares[i]
```

Although the snippet of code above does modify the existing list, it could be easily changed if needed.
Here's how it could be done with the `map` function:

```python
def f(x):
    return x * x

squares = list(map(f, range(1, 10)))
```

Both methods produce the following list:

```python
[1, 4, 9, 16, 25, 36, 49, 64, 81]
```

Lastly, the `reduce` function processes the elements in a list through a user-defined function and returns a single value. The function works by first processing the first two items of the list. The result of this is processed by the function, along with the next item in the list. This continues for all of the remaining items in the list. The format for the `reduce` function is as follows:

```python
reduce(function, list)
```

Again, the parameters are the same as specified for the previous functions. Suppose, for example, that you want to compute the factorial of 10. Here's one way to do this:

```python
fact = 1
for i in range(1, 11):
    fact *= i
```

Finally, here's how to do it with the `reduce` function. Note that the `reduce` function comes from the `functools` module that is part of Python. This means we need to import the function from that module before we can use it:

```python
from functools import reduce
def f(x, y):
    return x * y

fact = reduce(f, range(1, 11))
```

Both methods calculate the factorial of 10 (which is 3628800).
The following table summarizes the list functions discussed above:

|Function  |Purpose    | Syntax    | Returns |
|:---      |:--------- |:--------- | :---    |
| `filter` | Select list elements using a function              | `filter(function, list)` | iterator |
| `map`    | Apply a function to every list element             | `map(function, list)`    | iterator |
| `reduce` | Reduce a list to a single value using a function   | `reduce(function, list)` | value    |


## List Comprehensions

Consider the simple problem of creating a list of the cubes of the integers 0, 1, 2, etc, up to 9 (i.e., 0, 1, 8, 27, 64, ..., 729).

::: {.callout-tip title="Practice"}
Try to write a snippet of Python code that accomplishes the above before continuing.
:::

Another way uses a concept known as **list comprehensions**. 

A **list comprehension** provides a simple, concise way of creating lists (even complex ones). The most common use of this concept creates a list where each element is the result of some operation or expression applied to each element of another list. 

Here's an example that does the same thing as the snippet of code above:

```python
cubes = [x * x * x for x in range(10)]
```

Yes, it's a single statement! A **list comprehension** uses the for loop to generate or to iterate through the items of a sequence and applies some operation or expression to each of those items. In the statement above, the generated sequence is the range of values from 0 through 9. The expression that is applied to each of the elements in the generated sequence is `x * x * x` (i.e., it cubes each element). The result is a new list of the cubes of the elements in the generated sequence (0 through 9):

```python
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729]
```

The list comprehension can be read in English as, 

>the variable cubed is to be a list that contains some x cubed for each x in the range 0 through 9.

In fact, we can map the English version to the Python statement:

[insert table]

Minimally, a list comprehension consists of brackets containing an expression (e.g., `x * x * x`) followed by a for-loop. Additional for-loops or even if-statements can be chained after the first for-loop.
The resulting list is an evaluation of the expression in the context of the for-loops and if-statements that follow it. Here's a seemingly convoluted example:

```python
sums = [x + y for x in [1, 2, 3] for y in [3, 1, 4] if x != y]
```

The output of this statement is:
```python
[4, 5, 5, 3, 6, 4, 7]
```

This statement generates a list of the sums of the pairs that can be formed by combining a single element from the first list `[1, 2, 3]` with a single element from the second list `[3, 1, 4]`, **so long as the elements differ** (i.e., `if x != y`). The elements of each list are processed from left-to-right. The first sum is calculated by adding the first element of the first list to the first element of the second list (1 + 3 = 4). The second sum is calculated by adding the first element of the first list to the third element of the second list (1 + 4 = 5). Why the third element and not the second? Because this would mean that both elements have the same value (1). The if statement ensures that sums will only be produced if the list elements differ.

Here's another (similar) example of list comprehension:

```python
pairs = [[x, y] for x in [1, 2, 3] for y in [3, 1, 4] if x < y]
```

The output of this statement is:

```python
[[1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]
```

This statement generates a list of the pairs that can be formed by combining a single element from the first list ([1, 2, 3]) with a single element from the second list ([3, 1, 4]), **so long as the element from the first list is less than the element from the second list**. Again, the list elements are processed from left-to-right. It is similar to the previous statement; however, instead of generating a list of sums, a list of pairs of elements is generated. In fact, it's a list of lists! The enclosed sublists are composed of only two elements each.

Really cool things can be done with list comprehension. For example, here's a neat way to compute pi to various precisions from two through eight digits:

```python
from math import pi

pi_digits = [round(pi, n) for n in range(2, 9)]
```

And here's the output:

```python
[3.14, 3.142, 3.1416, 3.14159, 3.141593, 3.1415927, 3.14159265]
```

The function `round` does what you expect it to do: it *rounds* the value specified in the first parameter to a precision specified in the second parameter. For example, the expression `round(pi, 3)` rounds pi to three digits to the right of the decimal point (i.e., 3.142).

## Sets

In Python, a set is just another type of sequence. The mathematical definition of a set is an unordered collection of unique elements. That is, a set is basically just a list with no duplicates.

::: {.callout-tip title="Definition"}
A **set** is a type of Python sequence that contains an unordered collection of unique values.
:::

Since sets are mathematically defined, they support mathematical operations such as union, intersection, and difference. Defining a set can be done in several ways. The first is to formally define one, very much like you would define a list. However, instead of using square brackets, we use curly braces:

```python
a = { 1, 2, 3, 4, 5 }
b = { 3, 4, 5, 6, 7 }
```

These Python statements declare and initialize two sets, `a` and `b`. Another way to create a set is to do so from some other sequence (such as a list):

```python
c = [ 3, 1, 4, 1, 5, 9 ]
d = set(c)
```

The list `c` is used as input to create the set `d`. The set `d` will only have one instance of any duplicated element in the list `c`; therefore, the value of the set `d` is as follows:

```python
{1, 3, 4, 5, 9}
```

Note that the element 1 appears only once in the set `d`. In addition, the set is unordered; that is, its elements don't necessarily have to be in the same order as those in the list.

A set can even be created from a string (since a string is a sequence):

```python
e = set("sweet") 
```

The value of the set `e` is as follows:

```python
{'s', 't', 'w', 'e'}
```

Again, note that the elements of this set are unique. To illustrate the set operations (union, intersection, and difference), we will use the sets `a` and `b` defined above. The **union** of the sets `a` and `b` represents the elements **in either a or b**. The Python expression for this is written as `a | b`. 

Its output is the following set:

```python
{1, 2, 3, 4, 5, 6, 7}
```

These elements are all of the unique elements in `a` or `b`. Similarly, the **intersection** of the sets `a` and `b` represents the elements **in both a and b**. The Python expression for this is written as `a & b`. Its output is the following set:

```python
{3, 4, 5}
```

These elements are the only unique elements in both `a` and `b`. Lastly, the **difference** of the sets `a` and `b` represents the elements **in a but not in b**. The Python expression for this is written as `a – b`. Its output is the following set:

```python
{1, 2}
```

The difference operation can be thought of as a subtraction of the set `b` from the set `a`. All elements in both `a` and `b` are removed. The remaining elements in a make up the resulting set. Any additional elements in `b` that are not in `a` are ignored.

## Dictionaries

## Dictionary Comprehensions

## Activity: Room Adventure...Reloaded


## Wrapping Up Data Structures

By now, you should have a good idea of the need for data structures. Generally, programs that solve problems store and manipulate data in some way. Data structures make this possible. In this curriculum, various useful data structures were introduced. Here is a table that summarizes them:

